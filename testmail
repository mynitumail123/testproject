package org.myproject.sample.core.servlets;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.jcr.Session;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.text.StrLookup;
import org.apache.commons.mail.HtmlEmail;
import org.apache.commons.mail.SimpleEmail;
import org.apache.jackrabbit.api.security.user.Authorizable;
import org.apache.jackrabbit.api.security.user.UserManager;
import org.apache.sling.api.resource.LoginException;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.jcr.resource.api.JcrResourceConstants;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.adobe.granite.workflow.WorkflowException;
import com.adobe.granite.workflow.WorkflowSession;
import com.adobe.granite.workflow.exec.WorkItem;
import com.adobe.granite.workflow.exec.WorkflowData;
import com.adobe.granite.workflow.exec.WorkflowProcess;
import com.adobe.granite.workflow.metadata.MetaDataMap;
import com.day.cq.commons.mail.MailTemplate;
import com.day.cq.mailer.MailService;
//MessageServiceGateway API
import com.day.cq.mailer.MessageGateway;
import com.day.cq.mailer.MessageGatewayService;
import com.day.cq.mcm.emailprovider.types.Email;


@Component(service = WorkflowProcess.class, property = {
		Constants.SERVICE_DESCRIPTION + "= CHS-DAM - Send Notification Email",
		"process.label = CHS-DAM - Send Notification Email to Workflow Initiator" })
public class SendCustomEmailProcess implements WorkflowProcess  {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(SendCustomEmailProcess.class);

	@Reference
	ResourceResolverFactory resourceResolverFactory;
	
	@Reference
	private MessageGatewayService messageGatewayService;
	
	@Reference
	MailService mailService;
	
	public static final MAIL_MESSAGE = "message";
	public static final ASSET_STATUS = "assetStatus";
	public static final MAIL_SUBJECT = "subject";
	public static final INITIATOR_EMAIL = "initiator"; 
	public static final TEMPLATE_PATH = "templatePath";
	public static final FROM_EMAIL = "anonymous@aetna.com";
	
	
	@Override
	public void execute(WorkItem workItem, WorkflowSession workflowSession, MetaDataMap processArguments) throws WorkflowException {
		
		
		WorkflowData workflowData = workItem.getWorkflowData();
		final String path = workflowData.getPayload().toString();
		LOGGER.debug("SendCustomEmailProcess execute method for payload '{}' started.", path);
		ResourceResolver resourceResolver = null;
		
        MessageGateway<Email> emailService =  messageGatewayService.getGateway(Email.class);; 
        Email email = new SimpleEmail();
        
		try {
			resourceResolver = this.getResourceResolver(workflowSession.adaptTo(Session.class));
			
			if(processArguments.containsKey("PROCESS_ARGS")){
			
					String[] args = buildArguments(processArguments);
		
					String msg = getValueFromArgs("message", args);
					String emailSubject =  getValueFromArgs("subject", args);
					String assetStatus = getValueFromArgs("assetStatus", args);
					String emailTemplatePath = getValueFromArgs("templatePath", args);
			        
					UserManager manager = resourceResolver.adaptTo(UserManager.class);
			    	Authorizable authorizable = manager.getAuthorizable(workItem.getWorkflow().getInitiator());
			    	String emailAdd = authorizable.getProperty("./profile/email")[0].getString();
			    	
			     	Map<String, String> parameters = new HashMap<String, String>();
					parameters.put("assetStatus", assetStatus);
					parameters.put("initiator", emailAdd);
					parameters.put("subject", emailSubject);
					parameters.put("message", msg);
			
			sendEmail(workflowSession.adaptTo(Session.class), parameters, emailAdd, emailService, emailTemplatePath);
			}
	        
	    	
		}catch (Exception e) {
			LOGGER.error("Error in Send Custom Email Process " + e.getMessage());
		    
		}
		
	}
	
	
	private boolean sendEmail (Session session,Map<String, String> parameters, String recipeintAdd, MessageGateway<Email> emailService, String emailTemplatePath) {
		boolean sendSuccess = false;
		try {
			
			final MailTemplate mailTemplate = MailTemplate.create(emailTemplatePath, session);
			final HtmlEmail email = mailTemplate.getEmail(StrLookup.mapLookup(parameters), HtmlEmail.class);
			
			email.addTo(recipeintAdd);
			 email.setFrom("anonymous@aetna.com");
			 email.setCharset(CharEncoding.UTF_8);
			 emailService.send( (Email)email);
			
			LOGGER.info("Email send successfully");
			sendSuccess = true;
		} catch (Exception ex) {
			LOGGER.error("Error while sending email", ex);
		}
		return sendSuccess;
	}
	
	
	/***
     * Gets value from workflow process arguments
     * 
     * @param key
     * @param arguments
     * @return String of the argument value or null if not found
     */
    protected String getValueFromArgs(String key, String[] arguments) {
    	
    	if(StringUtils.isNotEmpty(key)) {
        for (String str : arguments) {
            String trimmedStr = str.trim();
            if (trimmedStr.startsWith(key + "=")) {
                return trimmedStr.substring((key + "=").length());
            }
        }
    	}
        return null;
    }
    
    
    /***
     * 
     * @param metaData
     * @return
     */
    private String[] buildArguments(MetaDataMap metaData) {
        // the 'old' way, ensures backward compatibility
        String processArgs = metaData.get("PROCESS_ARGS", String.class);
        if (processArgs != null && !processArgs.equals("")) {
            return processArgs.split(",");
        } else {
            return new String[0];
        }
    }
	/**
	 * @param session
	 * @return
	 * @throws LoginException
	 *             This methods return the Resource Resolver object
	 */
	private ResourceResolver getResourceResolver(final Session session) throws LoginException {

		return resourceResolverFactory.getResourceResolver(
				Collections.<String, Object>singletonMap(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, session));
	}

	
	
}
